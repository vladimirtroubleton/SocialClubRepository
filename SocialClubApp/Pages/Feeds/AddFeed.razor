@page "/addFeed"
@using FeedsDataLayer.Models
@inject SocialClubApp.Services.FeedsService feedServ
@inject SocialClubApp.Services.FilesService fileServ

@inject NavigationManager uriHelper
@inject AuthenticationStateProvider authProvider
@inject SocialClubApp.Services.IAuthService authServ
<div class="container">


    <div class="row">
        <div class="col-8 mx-auto text-center">
            <EditForm Model="@feedModel" OnValidSubmit="AddFeedInDb">
                <DataAnnotationsValidator />
                <ValidationSummary Model="@feedModel" />



                <div class="form-group">
                    <label class="control-label">Введите заголовок</label>
                    <InputText @bind-Value="feedModel.Title" class="form-control" />
                    <ValidationMessage For="@(() => feedModel.Title)" />
                </div>

                <div class="form-group">
                    <label class="control-label">Что хотите рассказать?</label>
                    <InputTextArea @bind-Value="feedModel.Feed" class="form-control" />
                    <ValidationMessage For="@(() => feedModel.Feed)" />
                </div>
                <div class="form-group">
                    <InputFile multiple OnChange="HandleSelection" />
                    <p>@fileStatus</p>
                </div>



                <button class="ml-md-auto btn btn-outline-warning" type="submit">Добавить</button>





            </EditForm>
        </div>
    </div>
</div>

@code {
    FeedModel feedModel = new FeedModel();


    FilesManageDataLayer.Models.FileModel fileLoad;
    FilesManageDataLayer.Models.FileModel[] filesLoad;

    string fileStatus;

    Guid feedId;

    private async Task AddFeedInDb()
    {
        feedId = Guid.NewGuid();

        if (fileLoad != null)
        {
            await fileServ.AddFileConnection(feedId, fileLoad);
        }
        if (filesLoad != null)
        {
            await fileServ.AddFilesConnection(feedId, filesLoad);
        }
        feedModel.Id = feedId;
        await feedServ.CreateFeed(feedModel);
        uriHelper.NavigateTo("/");

    }

    private async Task HandleSelection(IFileListEntry[] files)
    {

        if (files != null)
        {
            if (files.Count() == 1)
            {
                var file = files.FirstOrDefault();
                fileLoad = await fileServ.CreateFile(file);
                fileStatus = "Загрузка файлазавершена";
            }
            else
            {
                filesLoad = await fileServ.CreateFiles(files);
                fileStatus = "Загрузка файлов завершена";
            }


        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        feedModel.Author = authState.User.Identity.Name;
    }
}
